#include <cairo.h>
#include <cairo-svg.h>
#include <math.h>
#include <vector>

struct Point
{
  // z will refer to the pressure of the pen
  double x,y,z;
};

std::vector<Point> pointList{
    {284.920407, 93.602695, 0.590153},  {285.247852, 93.152492, 0.605988}, {285.493399, 92.906930, 0.622189},  {285.800377, 92.620434, 0.638368},
    {286.271063, 92.313486, 0.653515},  {286.844055, 91.986056, 0.667973}, {287.498916, 91.597254, 0.680365},  {288.235615, 91.187977, 0.692070},
    {289.013249, 90.737781, 0.703085},  {289.852285, 90.308045, 0.712401}, {290.752722, 89.960162, 0.718942},  {291.694064, 89.632747, 0.724449},
    {292.635436, 89.428105, 0.727548},  {293.535843, 89.264397, 0.730990}, {294.333944, 89.141616, 0.736842},  {295.050206, 89.059763, 0.744760},
    {295.664133, 89.018836, 0.755431},  {296.216657, 88.977909, 0.767479}, {296.748745, 88.977909, 0.778495},  {297.260335, 89.039295, 0.788822},
    {297.771955, 89.162084, 0.797449},  {298.201677, 89.325791, 0.805023}, {298.631428, 89.591820, 0.812596},  {298.917939, 89.898768, 0.819825},
    {299.081647, 90.308045, 0.826366},  {299.163516, 90.840095, 0.832562}, {299.102114, 91.494933, 0.837037},  {298.979341, 92.354406, 0.840479},
    {298.754232, 93.336667, 0.842545},  {298.365415, 94.441701, 0.843922}, {297.812860, 95.587654, 0.844954},  {297.137562, 96.733623, 0.845987},
    {296.359898, 97.859124, 0.846331},  {295.500425, 98.964158, 0.847020}, {294.579520, 100.130579, 0.848397}, {293.597244, 101.358402, 0.849774},
    {292.553567, 102.647611, 0.851839}, {291.591758, 103.998206, 0.854249}, {290.691320, 105.328350, 0.857003}, {289.872752, 106.576624, 0.859757},
    {289.136052, 107.722593, 0.862166}, {288.399323, 108.807160, 0.864920}, {287.703558, 109.830340, 0.866986}, {287.089631, 110.914922, 0.869395},
    {286.598478, 112.081343, 0.871116}, {286.230128, 113.247764, 0.872493}, {286.025486, 114.393733, 0.873526}, {285.882246, 115.355526, 0.874559},
    {285.882246, 116.133145, 0.875936}, {286.066421, 116.706122, 0.877657}, {286.434771, 117.033537, 0.879722}, {287.028230, 117.176793, 0.881465},
    {287.867265, 117.094939, 0.882842}, {288.972315, 116.706122, 0.884219}, {290.343438, 116.071759, 0.884908}, {292.001042, 115.130432, 0.885596},
    {293.883755, 113.963996, 0.887661}, {295.868775, 112.695254, 0.890760}, {297.894729, 111.344659, 0.894546}, {299.920682, 109.973596, 0.898333},
    {301.905702, 108.520679, 0.900398}, {303.808883, 106.965441, 0.901775}, {305.712063, 105.287415, 0.902464}, {307.553842, 103.527551, 0.902808},
    {309.375154, 101.767671, 0.903152}, {311.135064, 100.069193, 0.903496}, {312.772201, 98.391182, 0.903496},  {314.307032, 96.754090, 0.903841},
    {315.678125, 95.157918, 0.903841},  {316.865043, 93.664082, 0.903841}, {317.929188, 92.313486, 0.903841},  {318.809158, 91.208444, 0.903841},
    {319.586792, 90.369431, 0.902464},  {320.221186, 89.837382, 0.901087}, {320.610003, 89.550893, 0.897989},  {319.975609, 90.062483, 0.897644},
    {319.300311, 90.676387, 0.897300},  {318.461276, 91.576787, 0.897300}, {317.519904, 92.784142, 0.897644},  {316.455759, 94.257526, 0.897989},
    {315.248373, 95.874150, 0.899021},  {313.979616, 97.552161, 0.899710}, {312.669895, 99.291574, 0.900742},  {311.380641, 101.030986, 0.902119},
    {310.275591, 102.831786, 0.902808}, {309.354687, 104.571198, 0.903496}, {308.617987, 106.146888, 0.904529}, {308.167768, 107.517951, 0.905218},
    {307.901725, 108.643452, 0.906250}, {307.860790, 109.605246, 0.907627}, {308.024528, 110.444252, 0.909004}, {308.351943, 111.180951, 0.910725},
    {308.863534, 111.794847, 0.912791}, {309.518394, 112.265518, 0.915545}, {310.296028, 112.511080, 0.917610}, {311.196466, 112.552014, 0.919676},
    {312.219676, 112.347372, 0.921741}, {313.304288, 111.897168, 0.923118}, {314.470739, 111.324192, 0.924839}, {315.678125, 110.587492, 0.927937},
    {316.905977, 109.728034, 0.931035}, {318.174765, 108.786693, 0.934134}, {319.402617, 107.640739, 0.936888}, {320.610003, 106.269676, 0.937920},
    {321.735549, 104.693971, 0.938609}, {322.758760, 102.934107, 0.938953}, {323.638700, 101.194694, 0.939297}, {324.395897, 99.537135, 0.939986},
    {325.030290, 98.002365, 0.940674},  {325.500946, 96.631302, 0.942740}, {325.828391, 95.403494, 0.945838},  {325.992099, 94.359847, 0.950313},
    {326.073968, 93.520826, 0.955132},  {326.033034, 92.906930, 0.958575}, {325.951165, 92.497646, 0.961673},  {325.746523, 92.149763, 0.960296},
    {325.910230, 92.763675, 0.960296},  {326.053501, 93.398053, 0.960296}, {326.278610, 94.134738, 0.960296},  {326.565091, 94.912356, 0.960296},
    {326.912973, 95.505800, 0.960640},  {327.383659, 95.996938, 0.960984}, {328.018053, 96.344821, 0.961328},  {328.836621, 96.528981, 0.961673},
    {329.777963, 96.610835, 0.962361},  {330.964911, 96.569915, 0.962361}, {332.336004, 96.447127, 0.962705},  {333.850368, 96.222033, 0.962705},
    {335.548876, 95.894617, 0.963050},  {337.288349, 95.485348, 0.963050}, {339.007325, 94.973758, 0.963394},  {340.726331, 94.400766, 0.963738},
    {342.363468, 93.786855, 0.964082},  {343.898299, 93.132024, 0.964427}, {345.371698, 92.477194, 0.964427},  {346.681419, 91.822348, 0.964771},
    {347.786499, 91.208444, 0.964771},  {348.666439, 90.676387, 0.965115}, {349.239461, 90.287578, 0.965115},  {349.546409, 90.021556, 0.963050},
    {349.055256, 89.898768, 0.961673},  {348.420892, 90.042016, 0.960984}, {347.581857, 90.226191, 0.960296},  {346.517712, 90.430826, 0.959607},
    {345.351230, 90.758241, 0.959263},  {344.102941, 91.187977, 0.958919}, {342.834154, 91.740494, 0.958230},  {341.503965, 92.497646, 0.957886},
    {340.153339, 93.418520, 0.957198},  {338.741311, 94.462168, 0.957198}, {337.267882, 95.669508, 0.956853},  {335.794453, 96.938265, 0.956853},
    {334.341491, 98.309328, 0.956853},  {333.031800, 99.741777, 0.956853}, {331.947187, 101.215161, 0.956853}, {331.169553, 102.729465, 0.956853},
    {330.698868, 104.182381, 0.956509}, {330.535160, 105.492058, 0.956509}, {330.637466, 106.576624, 0.956509}, {330.903510, 107.436097, 0.956509},
    {331.374196, 108.070476, 0.956509}, {331.988122, 108.541131, 0.956853}, {332.724821, 108.909481, 0.957198}, {333.563857, 109.134575, 0.957886},
    {334.505199, 109.277831, 0.958230}, {335.548876, 109.339217, 0.958919}, {336.674423, 109.298298, 0.959607}, {337.902276, 109.155043, 0.959951},
    {339.150596, 108.827627, 0.960640}, {340.337514, 108.316037, 0.960984}, {341.463030, 107.620272, 0.961328}, {342.547643, 106.740332, 0.961673},
    {343.529919, 105.717152, 0.962017}, {344.471291, 104.571198, 0.962361}, {345.330793, 103.322909, 0.962361}, {346.067493, 101.972313, 0.962361},
    {346.742821, 100.642169, 0.962705}, {347.315813, 99.250654, 0.962705}, {347.766031, 97.859124, 0.962705},  {348.154848, 96.467594, 0.962705},
    {348.441329, 95.096531, 0.962705},  {348.645971, 93.766403, 0.962705}, {348.809709, 92.579500, 0.962705},  {348.871081, 91.515400, 0.962705},
    {348.891548, 90.676387, 0.962705},  {348.871081, 90.042016, 0.962705}, {348.830176, 89.591820, 0.959951},  {348.748308, 89.223470, 0.954788},
    {348.441329, 89.509966, 0.954099},  {348.318556, 89.939695, 0.953411}, {348.216250, 90.574074, 0.953067},  {348.195783, 91.310765, 0.952722},
    {348.277622, 92.129311, 0.952722},  {348.523198, 93.009236, 0.952722}, {348.973417, 93.848257, 0.952722},  {349.546409, 94.584941, 0.952722},
    {350.324043, 95.178385, 0.953067},  {351.224480, 95.546735, 0.953411}, {352.288625, 95.730910, 0.953755},  {353.516478, 95.792296, 0.954444},
    {354.805702, 95.669508, 0.954788},  {356.094956, 95.403494, 0.955476}, {357.404678, 94.994210, 0.956509},  {358.755304, 94.421233, 0.957198},
    {360.167331, 93.745936, 0.957886},  {361.681695, 92.988784, 0.958575}, {363.257430, 92.170231, 0.959263},  {364.771794, 91.331225, 0.959951},
    {366.204288, 90.492220, 0.960296},  {367.493513, 89.673674, 0.960296}, {368.578125, 88.936982, 0.960640},  {369.458095, 88.261684, 0.960640},
    {370.153890, 87.750094, 0.960640},  {370.665480, 87.402211, 0.960296}, {370.972459, 87.197569, 0.959951},  {370.726882, 87.811481, 0.959951},
    {370.297131, 88.466319, 0.959951},  {369.683204, 89.387178, 0.960296}, {368.926037, 90.553606, 0.960640},  {368.087002, 91.986056, 0.961328},
    {367.186564, 93.643615, 0.961328},  {366.286127, 95.342093, 0.961673}, {365.406187, 97.040571, 0.962017},  {364.526217, 98.616276, 0.962705},
    {363.687181, 100.089660, 0.962705}, {362.868613, 101.481190, 0.963050}, {362.111446, 102.790851, 0.963394}, {361.456585, 103.998206, 0.963394},
    {360.944965, 105.082788, 0.963394}, {360.576615, 106.003648, 0.963394}, {360.371973, 106.719880, 0.963394}, {360.269667, 107.292857, 0.963394},
    {360.228733, 107.661207, 0.964427}, {360.208266, 107.968155, 0.966492}, {360.576615, 107.558885, 0.966836}, {360.822192, 107.170068, 0.966836},
    {361.129170, 106.597092, 0.966836}, {361.497520, 105.860407, 0.966836}, {361.947739, 104.919081, 0.966836}, {362.500263, 103.773112, 0.966836},
    {363.073255, 102.442969, 0.966836}, {363.687181, 100.928665, 0.966836}, {364.362509, 99.271107, 0.966836},  {365.037807, 97.470307, 0.966836},
    {365.795004, 95.608121, 0.966836},  {366.572638, 93.745936, 0.966836}, {367.350272, 92.006523, 0.966836},  {368.087002, 90.492220, 0.966492},
    {368.700928, 89.264397, 0.966148},  {369.253453, 88.302611, 0.965804}, {369.662737, 87.586379, 0.965115},  {369.990152, 87.095256, 0.964427},
    {370.235729, 86.747373, 0.961673},  {370.624546, 86.583666, 0.959263}, {370.911057, 87.013402, 0.958575},  {370.992896, 87.463598, 0.958230},
    {371.095232, 87.954728, 0.958230},  {371.197538, 88.527705, 0.958230}, {371.340808, 89.100690, 0.958230},  {371.524983, 89.714601, 0.958230},
    {371.729625, 90.328504, 0.958230},  {371.995669, 90.962883, 0.958575}, {372.364019, 91.597254, 0.959263},  {372.875609, 92.149763, 0.960296},
    {373.530470, 92.661369, 0.961328},  {374.349038, 93.050171, 0.963050}, {375.249476, 93.295732, 0.964771},  {376.272686, 93.438972, 0.966492},
    {377.398203, 93.438972, 0.968213},  {378.666990, 93.295732, 0.969612}, {380.099484, 93.029703, 0.970989},  {381.695687, 92.640901, 0.971677},
    {383.394225, 92.108844, 0.972710},  {385.154136, 91.474466, 0.973398}, {386.955010, 90.778708, 0.973743},  {388.755855, 90.001089, 0.974431},
    {390.515765, 89.059763, 0.974775},  {392.255238, 87.913802, 0.974775}, {394.035615, 86.501812, 0.975119},  {395.836460, 84.885180, 0.975464},
    {397.780575, 83.145775, 0.975464},  {399.745127, 81.344976, 0.975808}, {401.689242, 79.482782, 0.975808},  {403.531021, 77.600129, 0.976496},
    {405.045354, 75.840257, 0.976841},  {406.170901, 74.407807, 0.977185}, {406.969002, 73.323233, 0.977529},  {407.623863, 72.156805, 0.977873},
    {408.237789, 70.867595, 0.977873},  {408.810781, 69.312358, 0.977873}, {409.117729, 67.757128, 0.977529},  {408.974489, 66.672553, 0.976496},
    {408.421964, 66.099569, 0.976152},  {407.501060, 66.038182, 0.975808}, {406.355076, 66.324671, 0.975464},  {404.983983, 66.938582, 0.975464},
    {403.367313, 67.777587, 0.975464},  {401.586906, 68.821235, 0.975464}, {399.704192, 70.049050, 0.975464},  {397.760107, 71.481507, 0.975464},
    {395.775088, 73.220912, 0.975808},  {393.830973, 75.205886, 0.976496}, {391.845954, 77.415962, 0.977185},  {389.860904, 79.830665, 0.978218},
    {387.978221, 82.327229, 0.979595},  {386.218281, 84.885180, 0.980972}, {384.683480, 87.463598, 0.982693},  {383.373758, 89.919235, 0.984414},
    {382.268679, 92.374873, 0.986135},  {381.306870, 94.707729, 0.987856}, {380.529236, 96.917798, 0.989233},  {379.935777, 99.025545, 0.989577},
    {379.546960, 100.949133, 0.990266}, {379.424156, 102.729465, 0.991299}, {379.526493, 104.305170, 0.991987}, {379.874375, 105.655765, 0.993708},
    {380.447367, 106.678946, 0.996118}, {381.306870, 107.374711, 0.997839}, {382.391482, 107.722593, 0.999905}, {383.803510, 107.702126, 1.001282},
    {385.481581, 107.374711, 1.002314}, {387.405199, 106.740332, 1.003347}, {389.513021, 105.819473, 1.003691}, {391.805019, 104.591650, 1.004380},
    {394.219790, 103.097814, 1.004724}, {396.777831, 101.358402, 1.005068}, {399.499550, 99.434829, 1.005068},  {402.344103, 97.429388, 1.005757},
    {405.249997, 95.444414, 1.006789},  {408.094519, 93.561761, 1.008166}, {410.693495, 91.986056, 1.009888},  {412.985492, 90.717314, 1.011265},
    {414.888643, 89.816914, 1.012297},  {416.443941, 89.264397, 1.013674}, {417.630859, 88.875588, 1.015051},  {418.592668, 88.670953, 1.017805},
    {419.206594, 88.548172, 1.020215},  {419.554507, 88.466319, 1.024001}, {419.104288, 88.404925, 1.024346},  {418.735939, 88.445851, 1.024690},
    {418.306187, 88.466319, 1.024690},  {417.794567, 88.507246, 1.025034}, {417.180640, 88.527705, 1.025034},  {416.484875, 88.527705, 1.025034},
    {415.748146, 88.507246, 1.025034},  {414.990979, 88.507246, 1.025034}, {414.233812, 88.589099, 1.024690},  {413.415214, 88.773274, 1.024346},
    {412.494339, 89.039295, 1.024346},  {411.450661, 89.448572, 1.024001}, {410.222809, 90.001089, 1.024001},  {408.851716, 90.717314, 1.024001},
    {407.357819, 91.679108, 1.024001},  {405.782084, 92.845528, 1.024001}, {404.185882, 94.155205, 1.024001},  {402.691985, 95.546735, 1.024001},
    {401.279958, 96.876863, 1.024001},  {400.052105, 98.104686, 1.023657}, {399.028895, 99.250654, 1.023657},  {398.251230, 100.294302, 1.023313},
    {397.719173, 101.235628, 1.022624}, {397.432662, 102.176955, 1.022280}, {397.309889, 103.036428, 1.021592}, {397.371290, 103.793579, 1.020903},
    {397.555465, 104.468877, 1.020559}, {397.923815, 104.980467, 1.020215}, {398.414968, 105.348817, 1.019870}, {398.987960, 105.573911, 1.019870},
    {399.704192, 105.655765, 1.019526}, {400.502294, 105.573911, 1.019526}, {401.443665, 105.287415, 1.019526}, {402.528278, 104.816760, 1.019870},
    {403.735663, 104.120995, 1.019870}, {405.065822, 103.281989, 1.020215}, {406.518784, 102.279261, 1.020215}, {408.094519, 101.092373, 1.020215},
    {409.833992, 99.741777, 1.020559},  {411.757640, 98.043299, 1.020559}, {413.844965, 96.017391, 1.020903},  {416.116495, 93.664082, 1.020903},
    {418.613135, 90.962883, 1.020903},  {421.314417, 88.118436, 1.020903}, {424.138472, 85.110282, 1.020559},  {427.023929, 82.061200, 1.020215},
    {429.868451, 79.032586, 1.015395},  {432.569733, 76.003964, 1.010576}, {435.148212, 73.118598, 1.005757},  {437.460676, 70.478786, 1.000937},
    {439.527565, 68.125470, 0.999560},  {441.205636, 66.242817, 0.998183}, {442.433489, 64.871754, 0.996462},  {443.190655, 63.971354, 0.994397},
    {443.497634, 63.500691, 0.990954},  {442.801838, 63.766720, 0.990610}, {441.860497, 64.564798, 0.990610},  {440.509841, 65.772153, 0.990610},
    {438.872704, 67.286464, 0.990610},  {437.010458, 69.066796, 0.990954}, {435.004971, 71.072230, 0.990954},  {432.835777, 73.302766, 0.990954},
    {430.380072, 75.983505, 0.990954},  {427.637855, 79.073513, 0.990954}, {424.547756, 82.490937, 0.990954},  {421.212081, 86.256243, 0.990954},
    {417.999209, 90.001089, 0.991643},  {415.011446, 93.582228, 0.991987}, {412.719449, 96.795009, 0.992331},  {411.184618, 99.434829, 0.993364},
    {410.550224, 101.501642, 0.994397}, {410.836735, 103.015960, 0.996118}, {412.105522, 103.936820, 0.997495}, {414.356585, 104.284702, 0.984070},
    {417.548990, 104.080060, 0.953755}, {421.764636, 103.302441, 0.890415}, {426.798820, 102.136021, 0.795728}, {432.508331, 100.601250, 0.794007},
    {438.749931, 98.800451, 0.773331},  {445.400784, 96.733623, 0.070500}};


/*
 * Xournal++
 *
 * Draw's a polygon around a stroke with a calligraphic style
 *
 * @author Xournal++ Team
 * https://github.com/xournalpp/xournalpp
 *
 * @license GNU GPLv2 or later
 */
void drawCalligraphicOnePolygon(cairo_t *cr, std::vector<Point> path, double nibAngle, double thickness) {
  // To save calculations in the loop
  double rise = sin(nibAngle), run = cos(nibAngle);
  // This is what gives the nib it's slant and thickness
  double yShift = rise * thickness;
  double xShift = run * thickness;

  // Setting up for the first iteration
  bool movingUp = false;

  int pathLen = path.size();

  std::vector<Point> backAndForthList;

  // Follow path in order it was created
  for (int i = 0; i < pathLen; i++) {
    backAndForthList.emplace_back(path[i]);
  }

  // Now reverse along the same path
  for (int i = 2 ; i <= pathLen ; i++) {
    backAndForthList.emplace_back(path[pathLen-i]);
  }

  // backAndForthList now contains the path forwards, then backwards

  bool firstIteration = true;
  for (auto pCurr = begin(backAndForthList), pNext = std::next(pCurr), last = end(backAndForthList); pCurr != last && pNext != last; ++pCurr, ++pNext) {


    // Move everything to the origin, then check if the next point is above the line
    bool nextIsAbove = rise * (pNext->x - pCurr->x) < run * (pNext->y - pCurr->y);

    // Notice it will be false on first iteration due to the initial values of moving_(up/down)
    // Also, it's value is based on the last iteration's moving_(up/down) value
    bool switchedDirection = nextIsAbove ^ movingUp;

    // Update movement direction for this iteration
    movingUp = nextIsAbove;

    // What if the next point is on the slope?
    /*
     * If you had two points laying on the same slope of then pen, then no matter how you connect the two
     * the result is always identical, so long as you draw a line from one side to another once.
     * Due to this, we don't have to check for if the next point lays on the same line or have any special
     * behavior in this case
    */
    double multiplier = (nextIsAbove) ? 1.0 : -1.0;

    // This section deals with drawing the corners/start/end points of the stroke
    // It also makes sure that the winding number for intersections is exactly +-n != 0 (where n is the # of intersections)
    if (firstIteration) {
        cairo_line_to(cr, pCurr->x - multiplier * (xShift * pCurr->z) , pCurr->y - multiplier * (yShift * pCurr->z) );
        cairo_line_to(cr, pCurr->x + multiplier * (xShift * pCurr->z) , pCurr->y + multiplier * (yShift * pCurr->z) );
    } else {
      if (switchedDirection) {
        // The reason why this works, is because if movingUp is true, then
        // previously you were moving down (because you switched), (or vise versa)
        // this makes it so that you draw in the correct direction.
        cairo_line_to(cr, pCurr->x + multiplier * (xShift * pCurr->z) , pCurr->y + multiplier * (yShift * pCurr->z) );
      }
    }
    // Deals with drawing strokes in a single direction 
    cairo_line_to(cr, pNext->x + multiplier * (xShift * pNext->z) , pNext->y + multiplier * (yShift * pNext->z) );
    firstIteration = false;
  }
  cairo_close_path(cr);
  cairo_fill_preserve(cr);
}


int main (int argc, char *argv[]) {
  // cairo setup
  cairo_t *cr; 
  cairo_surface_t *surface;
  surface = cairo_svg_surface_create ("testing_new_changes.svg", 800, 200);
  cr = cairo_create (surface);

  cairo_set_source_rgb(cr, 0, 0, 0);
  cairo_set_line_width(cr, 1);

  // Draw a real Stroke 
  drawCalligraphicOnePolygon(cr, pointList, M_PI/8, 3.0);

  cairo_surface_destroy (surface);
  cairo_destroy (cr);
  return 0;
}

